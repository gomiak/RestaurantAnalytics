@page "/dashboard"

@using RestaurantAnalytics.Core.Interfaces
@inject ISalesRepository repository

<MudPaper Class="pa-4" Elevation="3">

    <MudChart ChartType="ChartType.Line"
              ChartSeries="@_series"
              @bind-SelectedIndex="_index"
              XAxisLabels="@_xAxisLabels"
              Width="@_width"
              Height="@_height"
              ChartOptions="@_options"
              AxisChartOptions="@_axisChartOptions" />
    <MudGrid Class="mt-4" GutterSize="3">

        <MudItem md="6" xs="12">
            <MudTextField @bind-Value="_width" Label="Largura do Gráfico" />
        </MudItem>

        <MudItem md="6" xs="12">
            <MudTextField @bind-Value="_height" Label="Altura do Gráfico" />
        </MudItem>

        <MudItem md="6" xs="12">
            <MudCheckBox T="bool"
                         Label="Exibir como Área"
                         ValueChanged="(v)=> { _series[0].LineDisplayType = v ? LineDisplayType.Area : LineDisplayType.Line; StateHasChanged(); }" />
        </MudItem>

        <MudItem md="6" xs="12">
            <MudStack>
                <MudText>Espessura da Linha</MudText>
                <MudSlider @bind-Value="_options.LineStrokeWidth" Min="1" Max="10" />
            </MudStack>
            <MudText Class="ml-1">Atual: @_options.LineStrokeWidth</MudText>
        </MudItem>

        <MudItem md="6" xs="12">
            <MudStack>
                <MudText>Rotação dos Labels do Eixo X</MudText>
                <MudSlider @bind-Value="_axisChartOptions.XAxisLabelRotation" Min="0" Max="90" Step="15" />
            </MudStack>
        </MudItem>

        <MudItem md="6" xs="12">
            <MudCheckBox T="bool"
                         Label="Mostrar Pontos"
                         @bind-Value="ShowMarkers" />
        </MudItem>



    </MudGrid>

</MudPaper>

@code {
    private int _index = -1;
    private bool _showMarkers = true;
    private bool ShowMarkers
    {
        get => _showMarkers;
        set
        {
            _showMarkers = value;
            _series.ForEach(x => x.ShowDataMarkers = value);
            StateHasChanged();
        }
    }

    private ChartOptions _options = new()
        {
            LineStrokeWidth = 3,
            YAxisFormat = "0.#'k'" 
        };

    private AxisChartOptions _axisChartOptions = new()
        {
            MatchBoundsToSize = true,
            XAxisLabelRotation = 0
        };

    private string _width = "650px";
    private string _height = "350px";

    private List<ChartSeries> _series = new();
    private string[] _xAxisLabels = Array.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        var start = DateTime.UtcNow.AddDays(-30);
        var end = DateTime.UtcNow;

        var revenue = await repository.GetDailyRevenueAsync(start, end);

        _xAxisLabels = revenue.Keys
            .Select((date, index) => index % 3 == 0 ? date.ToString("dd/MM") : "")
            .ToArray();

        _width = $"{Math.Max(650, revenue.Count * 25)}px";

        _series = new()
        {
            new ChartSeries
            {
                Name = "Faturamento Diário",
                Data = revenue.Values.Select(v => (double)(v / 1000)).ToArray(),
                ShowDataMarkers = _showMarkers
            }
        };
    }
}


