@using RestaurantAnalytics.Core.Interfaces
@using Components.Pages.Dashboard.Charts
@inject ISalesRepository repository

<MudChart ChartType="ChartType.Line"
          ChartSeries="@_series"
          @bind-SelectedIndex="_index"
          XAxisLabels="@_xAxisLabels"
          Width="@_width"
          Height="@_height"
          ChartOptions="@_options"
          AxisChartOptions="@_axisChartOptions" />

<!-- BOTÃO + INSIGHT -->
<InsightBox Data="_revenueDict" />

<!-- CONTROLES -->
<MudGrid Class="mt-4" GutterSize="3">

    <MudItem md="6" xs="12">
        <MudTextField @bind-Value="_width" Label="Largura do Gráfico" />
    </MudItem>

    <MudItem md="6" xs="12">
        <MudTextField @bind-Value="_height" Label="Altura do Gráfico" />
    </MudItem>

    <MudItem md="6" xs="12">
        <MudCheckBox T="bool" Label="Exibir como Área" @bind-Value="ShowAsArea" />
    </MudItem>

    <MudItem md="6" xs="12">
        <MudStack>
            <MudText>Espessura da Linha</MudText>
            <MudSlider @bind-Value="_options.LineStrokeWidth" Min="1" Max="10" />
        </MudStack>
    </MudItem>

    <MudItem md="6" xs="12">
        <MudStack>
            <MudText>Rotação dos Labels do Eixo X</MudText>
            <MudSlider @bind-Value="_axisChartOptions.XAxisLabelRotation" Min="0" Max="90" Step="15" />
        </MudStack>
    </MudItem>

    <MudItem md="6" xs="12">
        <MudCheckBox T="bool" Label="Mostrar Pontos" @bind-Value="ShowMarkers" />
    </MudItem>

</MudGrid>

@code {
    private int _index = -1;
    private bool _showMarkers = true;
    private bool _showAsArea = false;

    private bool ShowMarkers { get => _showMarkers; set { _showMarkers = value; _series.ForEach(x => x.ShowDataMarkers = value); StateHasChanged(); } }
    private bool ShowAsArea { get => _showAsArea; set { _showAsArea = value; _series.ForEach(x => x.LineDisplayType = value ? LineDisplayType.Area : LineDisplayType.Line); StateHasChanged(); } }

    private ChartOptions _options = new() { LineStrokeWidth = 3, YAxisFormat = "0.#K" };
    private AxisChartOptions _axisChartOptions = new() { MatchBoundsToSize = true, XAxisLabelRotation = 0 };

    private string _width = "650px";
    private string _height = "350px";
    private List<ChartSeries> _series = new();
    private string[] _xAxisLabels = Array.Empty<string>();

    private Dictionary<DateTime, decimal> _revenueDict = new();

    protected override async Task OnInitializedAsync()
    {
        var start = DateTime.UtcNow.AddDays(-30);
        var end = DateTime.UtcNow;

        var revenue = await repository.GetDailyRevenueAsync(start, end);
        _revenueDict = revenue;

        _xAxisLabels = revenue.Keys.Select((d, i) => i % 3 == 0 ? d.ToString("dd/MM") : "").ToArray();
        _width = $"{Math.Max(650, revenue.Count * 25)}px";

        _series = new()
        {
            new ChartSeries
            {
                Name = "Faturamento (K)",
                Data = revenue.Values.Select(v => (double)v / 1000).ToArray(),
                ShowDataMarkers = true,
                LineDisplayType = LineDisplayType.Line
            }
        };

        StateHasChanged();
    }
}
